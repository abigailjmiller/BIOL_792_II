Homework 1
Abby Miller

1. What is a Graphical User Interface (GUI) and how does that differ from the Command Line Interface (CLI)?
A GUI is a way to interact with the computer via pull down menus and clicking on files, etc. to open them.

A CLI is a way to interact with the computer via typing commands into the terminal.

2. What does the shell do?
The shell is a program that runs other programs. You interact with the shell to give commands to the computer.

3. What is the command used for listing things in a directory?
ls

4. What is the command used for changing directories?
cd

5. What command would you use to get your current working directory?
pwd

6. How do you get the manual for these commands?
man

7. What does the shell prompt look like?
$

8. How would you list things in a directory in chronological order?
ls -t

9. Name two ways to get to the ‘home’ or ‘root’ directory.
cd ~

cd /

10. What is the difference between an absolute path and a relative path?
Absolute path contains the root and complete path to the current directory.

Relative path changes depending on what directory you're currently in.

11. What are the two relative path directories we talked about and what do they mean?
. is your current directory
.. moves you up one directory

12. Why shouldn’t you put spaces in filenames?
Because when you're trying to type the filename into the terminal if it has spaces one of the words may be interpreted as a command or argument.

13. Name a way to have multiple readable words in a filename without spaces?
Using "_"

14. What is the program nano, what does it do? Do you use nano? If not what do you use?
Nano creates a new file that you can edit while in the terminal.

15. * is a form of a wildcard. What does it mean?
It represents any character.

16. The following code would match what? ls *.txt
List anything that ends in ".txt"

17. Why do we need to be careful with the mv command?
The mv command can overwrite other files.

18. Why do we need to be careful with the rm command?
It can remove files from the entire computer.

19. What is the difference between > and >>?
The ">" will overwrite an existing file. 
The ">>" will append or add to an existing file.

20. What does head do?
Prints the beginning of a file.

21. What is the purpose of | (pipe)?
Pipes or connects two commands together; you can do one command and then send the output of that command to another command.

22. Interpret the following command:

cat huge_file.fasta | uniq | head -n 5 >proteins.fasta

Take the first 5 unique lines of huge_file.fasta and put them in proteins.fasta 

23. What is a loop and when would you use it?
A loop goes through every object in a list of items and does some command to each object.

24. In a directory with the following files. What would the following loop do?

   $ for  filename in  *.txt; do
   > cat  ${filename}  >>fruits.txt
   > done

This loop would add each file to fruits.txt

25. What is a shell script?
A shell script is a list of commands written in a text editor or saved as some other file that can be saved and called on whenever.

26. What are the benefits of writing and running a script over typing the code in?
The shell script can be saved so you don't have to rewrite the code every time.

27. When looking at a script what does # mean? Why would you use one?
It goes in front of a comment that is not part of the script so you can annotate your script and explain what you're doing.
(For documentation)

28. What does grep stand for and what does it do?
The grep command can search for a regular expression and it stands for "global regular expression print"

29. What does find do?
Find can search for things through files and directories.

Part II - Writing Code

As part of this exercise please open the shell and practice moving around into different files. Best practice is to try a little bit every day. Try to challenge yourself by not using the mouse. For each of the questions below type your code and the result from the shell prompt.

30. Open the shell and change directories to the desktop and list the contents, paste your code here.
cd ~/Desktop
ls

31. Draw the file structure from the root directory into one of the folders on the desktop. You can submit a pdf with a drawing. Select three locations and type the commands for changing directories to those locations use a combination of absolute and relative paths.
Root --> Desktop --> Data_Science_2 --> Data_Science_For_Biology_II

cd ~/Desktop/Data_Science_2
cd /Users/abbymiller/Desktop/Data_Science_2/Data_Science_For_Biology_II
cd .. (takes you back to Data_Science_2 directory)

32. On your computer create a directory on your desktop. Create two files without opening them that have file extensions .txt. Then use wildcards to list the files in that directory. Paste you code here.

mkdir blank
cd ~/Desktop/blank
touch blank.txt
touch blank2.txt
ls *.txt

33. Download the file Hutia_DNA.fasta from the Github repo. Make a new directory on the desktop. Move the file into that directory. List the contents of the directory. How many lines are in this file? Fasta files are a type of data file that holds DNA sequences. They are all formatted the same. The first line starts with a > and a name followed by a line break, and then DNA sequence followed by a line break. The next line starts with an > and another name followed by a line break and the DNA sequence. With that in mind, how could you use linux commands to determine how many sequences are in this file? How many sequences are in this file?

mkdir practice
mv -n Hutia_DNA.fasta practice
cd ~/Desktop/practice 
ls
wc -l Hutia_DNA.fasta 
 2382004 Hutia_DNA.fasta
grep -o '>' Hutia_DNA.fasta | wc -l
 1191002

34. Build a single line of code that would take the first 100 sequences of this file and put them in a new file called ‘MyOutputFile.fasta’. Use a combination of wc, sort and uniq in a single line of code to tell me how many unique lines are in this file. Paste your commands and the answer here.
cat Hutia_DNA.fasta | head -n 100 > MyOutputFile.fasta
sort MyOutputFile.fasta | uniq | wc -l
   100

35. Write code that would create a loop to copy all the files in one directory ending in .txt to another directory. Paste the code here.
$ for  filename in  *.txt; do
   > cat  ${filename}  >> newdirectory
   > done 

36. Write a bash script with in-line documentation (hint #) to show how to run a made up python program (script) called 'find_taxa.py' on set of files ending in ‘.fasta’. Show in the script how to run the program on each of those files. What is the name of your script? Type the script here.


#!/usr/bin/sh #all bash scripts start with this
$ for  filename in  *.fasta; do #write a loop for all files that end in .fasta
   > find_taxa.py  ${filename} #run this python code on all files
   > done 

37. From the Hutia_DNA.fasta file tell me how on how many lines do we find the pattern ‘GAGA’. What was the code used to find this?

grep -o 'GAGA' Hutia_DNA.fasta | wc -l
  361111


